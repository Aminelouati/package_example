<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.8"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
    name="unsupervised_classification" projectName="Log Analysis"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="WORKSPACE" value="/Users/andrewssobral/ActiveEon/studio" />
    <variable name="PROJECT" value="log_analyzer" />
    <variable name="ALGORITHM" value="kmeans" />
  </variables>
  <description>
    <![CDATA[ Shows an example of unsupervised anomaly detection on HDFS log files. ]]>
  </description>
  <genericInformation>
    <info name="Documentation" value="http://activeeon.com/resources/automated-machine-learning-activeeon.pdf"/>
  </genericInformation>
  <taskFlow>
    <task name="Setup">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
#
# export variables_WORKSPACE=/Users/andrewssobral/ActiveEon/studio
#
echo "Moving to workspace"
cd $variables_WORKSPACE
pwd

#echo "Enabling python env (using pytorch env)"
#source activate pytorch
python -V
#pip -V

if [ ! -d $variables_PROJECT ]; then
  echo "Cloning repository"
  #git clone https://andrewsactiveeon:mFPrxuvPye7mzzKJRfLY@bitbucket.org/activeeon/log_analyzer.git $variables_PROJECT
fi

if [ ! -d $variables_PROJECT ]; then
  echo "An error occurred while clonning the repository."
  exit
fi

ls

echo "Moving to repository"
cd $variables_PROJECT
pwd

echo "Moving to data folder"
cd data
pwd

echo "Downloading data"
#./download_data.sh

#echo "Close python env"
#source deactivate pytorch

echo "Download_Data task finished"
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Log_Parse">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <depends>
        <task ref="Setup"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
#
# export variables_WORKSPACE=/Users/andrewssobral/ActiveEon/studio
#
echo "Moving to workspace"
cd $variables_WORKSPACE
pwd

echo "Moving to repository"
cd $variables_PROJECT
pwd

echo "Moving to python folder"
cd python
pwd

echo "Parsing log file"
# python log_parser.py --log=../data/sorted10k.log --out=../data/log_structured10k.csv

echo "Log_Parse task finished"
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Feature_Extraction">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <depends>
        <task ref="Log_Parse"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
#
# export variables_WORKSPACE=/Users/andrewssobral/ActiveEon/studio
#
echo "Moving to workspace"
cd $variables_WORKSPACE
pwd

echo "Moving to repository"
cd $variables_PROJECT
pwd

echo "Moving to python folder"
cd python
pwd

echo "Performing log feature extraction"
#python log_features.py --log=../data/log_structured10k.csv --out=../data/rawTFVector.txt

echo "Feature_Extraction task finished"
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Unsupervised_Classification">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <depends>
        <task ref="Feature_Extraction"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
#
# export variables_WORKSPACE=/Users/andrewssobral/ActiveEon/studio
# export variables_ALGORITHM=invariants_mining
# kmeans, agglomerative_clustering, invariants_mining, pca
#
echo "Moving to workspace"
cd $variables_WORKSPACE
pwd

echo "Moving to repository"
cd $variables_PROJECT
pwd

echo "Moving to python folder"
cd python
pwd

echo "Performing unsupervised prediction"
python unsupervised_prediction.py --model $variables_ALGORITHM --features ../data/X_test.txt --label ../data/Y_test.txt
#python unsupervised_prediction.py --model  kmeans --features ../data/X_test.txt --label ../data/Y_test.txt
#python unsupervised_prediction.py --model  agglomerative_clustering --features ../data/X_test.txt --label ../data/Y_test.txt
#python unsupervised_prediction.py --model  invariants_mining --features ../data/X_test.txt --label ../data/Y_test.txt
#python unsupervised_prediction.py --model  pca --features ../data/X_test.txt --label ../data/Y_test.txt

echo "Unsupervised_Classification task finished"
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Preview_Raw_Data">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="Setup"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def home = variables.get("WORKSPACE")
def project = variables.get("PROJECT")
def file_name = "sorted10k.log"

file_path  = home + "/"+project+"/data/" + file_name

println "home: " + home
println "file_name: " + file_name
println "file_path: " + file_path  

def file = new File(file_path)
println "file exists? " + file.exists()

//result = file.getText('UTF-8')
result = file.text
resultMetadata.put("file.name", "log.txt") //file_name
//resultMetadata.put("content.type", "text/plain; charset=UTF-8")
resultMetadata.put("content.type", "text/plain")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Preview_Structured_Data">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="Log_Parse"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def home = variables.get("WORKSPACE")
def project = variables.get("PROJECT")
def file_name = "log_structured10k.csv.html"

file_path  = home + "/"+project+"/data/" + file_name

println "home: " + home
println "file_name: " + file_name
println "file_path: " + file_path  

def file = new File(file_path)
println "file exists? " + file.exists()

result = file.text
resultMetadata.put("file.name", "log_structured.html")
resultMetadata.put("content.type", "text/html ")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Preview_Features">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="Feature_Extraction"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def home = variables.get("WORKSPACE")
def project = variables.get("PROJECT")
def file_name = "rawTFVector10k.txt"

file_path  = home + "/"+project+"/data/" + file_name

println "home: " + home
println "file_name: " + file_name
println "file_path: " + file_path  

def file = new File(file_path)
println "file exists? " + file.exists()

result = file.text
resultMetadata.put("file.name", "log_features.txt")
resultMetadata.put("content.type", "text/plain")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Post_Processing">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="Unsupervised_Classification"/>
      </depends>
      <inputFiles>
        <files  includes="anomaly_display.jar" accessMode="transferFromUserSpace"/>
      </inputFiles>
      <forkEnvironment >
        <additionalClasspath>
          <pathElement path="anomaly_display.jar"/>
        </additionalClasspath>
      </forkEnvironment>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
import org.ow2.proactive.main.DataLoad;
import org.ow2.proactive.main.DataExport;
import org.ow2.proactive.data.Key;
import org.ow2.proactive.data.Raw;
                  

String workspace = variables.get('WORKSPACE');
String project = variables.get('PROJECT');
println(workspace);
println(project);

println("START load raw log data and key block cluster TASK");

/*
String log_file_path = workspace + "/" + project + "/data/sorted.log";
//String key_file_path = workspace + "/" + project + "/data/anomalies_idx.txt";
String key_file_path = workspace + "/" + project + "/data/cluster1_idx.txt";

Map<String, List<Raw>> block_data;
List<Key> key_data;

key_data=DataLoad.importKeyPOJO(key_file_path);

block_data=DataLoad.importBlockPOJO(log_file_path, key_data);

DataExport.exportKeyJsonString(key_data, workspace + "/" + project + "/preview/keys/keysJSONformat.json");

println("Making Block JSON from POJO...");
for (Map.Entry<String, List<Raw>> blockentry : block_data.entrySet()) {
     DataExport.exportBlockJsonString(blockentry.getValue(), workspace + "/" + project +"/preview/blocks/" + blockentry.getKey() + ".json");
}
*/

println ("END OF load raw log data and key block cluster TASK");
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Preview_Output">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="Post_Processing"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
// connect to the user space
userspaceapi.connect()

// pull file
preview_out = new File("redirect.html");
userspaceapi.pullFile(preview_out.getName(), preview_out)

// Expose the resulting chart image
result = preview_out.getBytes()
resultMetadata.put("file.name", "redirect.html")
resultMetadata.put("content.type", "text/html")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>