<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.8"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
    name="real_time_apache_intrusion_detection" projectName="Log Analysis"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="WORKSPACE" value="/root" />
    <variable name="PROJECT" value="log_analyzer" />
    <variable name="DATASPACE" value="data" />
    <variable name="STREAM_SIZE" value="1000" />
    <variable name="CONTAINER_NAME" value="ml" />
    <variable name="DOCKER_IMAGE" value="activeeon/dlm3" />
  </variables>
  <description>
    <![CDATA[ Performs real-time intrusion detection on Apache log files. ]]>
  </description>
  <genericInformation>
    <info name="Documentation" value="http://activeeon.com/resources/automated-machine-learning-activeeon.pdf"/>
  </genericInformation>
  <taskFlow>
    <task name="log_streaming">
      <description>
        <![CDATA[ Will run every minutes ]]>
      </description>
      <depends>
        <task ref="setup"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
#cd $variables_WORKSPACE
#cd $variables_PROJECT
#cd $variables_DATASPACE
#pwd

#log_file=$(find ./log_space -type f -name 'x*' -print | head -n 1)
#if ! [ -z ${log_file} ]; 
#then 
#  echo "move '$log_file' to data shared_space"; 
#  mv ${log_file} shared_space/; 
#else 
#  echo "end log streaming"; 
#  touch shared_space/empty; 
#fi

#export log_file=$(find /root/log_analyzer/data/log_space -type f -name x* -print | head -n 1) 
#&& 
#if ! [ -z ${log_file} ]; 
#then   
#echo "move $log_file to data shared_space";   
#mv ${log_file} /root/log_analyzer/data/shared_space; 
#else   
#echo "end log streaming";   
#touch /root/log_analyzer/data/shared_space/empty; 
#fi

#docker exec $variables_CONTAINER_NAME /bin/bash -c 'export log_file=$(find '$variables_WORKSPACE/$variables_PROJECT/$variables_DATASPACE/log_space' -type f -name 'x*' -print | head -n 1) && if ! [ -z ${log_file} ]; then   echo "move $log_file to data shared_space";   mv ${log_file} '$variables_WORKSPACE/$variables_PROJECT/$variables_DATASPACE/shared_space'; else   echo "end log streaming";   touch '$variables_WORKSPACE/$variables_PROJECT/$variables_DATASPACE/shared_space/empty'; fi'

# ./run_log_producer_stream.sh
docker exec $variables_CONTAINER_NAME /bin/bash -c 'cd '$variables_WORKSPACE'/'$variables_PROJECT/bash' && ./run_log_producer_stream.sh'

docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_WORKSPACE/$variables_PROJECT/$variables_DATASPACE/log_space
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_WORKSPACE/$variables_PROJECT/$variables_DATASPACE/shared_space
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_WORKSPACE/$variables_PROJECT/$variables_DATASPACE/preview_space
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow >
        <loop target="log_streaming">
          <script>
            <code language="javascript">
              <![CDATA[
// You can use a Cron Expression here
// examples https://www.freeformatter.com/cron-expression-generator-quartz.html
              loop = '* * * * *';
]]>
            </code>
          </script>
        </loop>
      </controlFlow>
    </task>
    <task name="setup"
    
    preciousLogs="true" >
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
echo "Start real time anomaly detection"

docker pull $variables_DOCKER_IMAGE
export RUN_DOCKER="docker run -dit -h dlm -w /root --name=$variables_CONTAINER_NAME $variables_DOCKER_IMAGE"
echo "Checking if docker container is running"
if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
then 
  echo "OK. The $variables_CONTAINER_NAME container is running!"
else 
  echo "$variables_CONTAINER_NAME container is not running."
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "false" ]; 
  then 
    echo "Starting it..."
    docker start $variables_CONTAINER_NAME
  else 
    echo "Running it..."
    echo $RUN_DOCKER
    $($RUN_DOCKER)
    sleep 5
  fi
  if [ $(docker inspect -f '{{.State.Running}}' $variables_CONTAINER_NAME) = "true" ]; 
  then 
    echo "OK. The $variables_CONTAINER_NAME container is running now!"
  else 
    echo "$variables_CONTAINER_NAME container is not running."
    echo "An error occurred while running the container."
    exit
  fi
fi

# export variables_WORKSPACE=/root && export variables_PROJECT=log_analyzer && export variables_DATASPACE=data && export variables_CONTAINER_NAME=ml && export variables_STREAM_SIZE=1000

# docker exec ml /bin/bash -c 'rm -r -f log_analyzer'
# docker exec ml /bin/bash -c 'wget https://s3.eu-central-1.amazonaws.com/activeeonpublic/log_analyzer/log_analyzer.zip'
# docker exec ml /bin/bash -c 'ls'
# docker exec ml /bin/bash -c 'unzip log_analyzer.zip'
# docker exec ml /bin/bash -c 'rm -r -f log_analyzer.zip'
# docker exec ml /bin/bash -c 'cd /root/log_analyzer && ls'

docker exec $variables_CONTAINER_NAME /bin/bash -c 'rm -r -f '$variables_PROJECT
docker exec $variables_CONTAINER_NAME /bin/bash -c 'wget https://s3.eu-central-1.amazonaws.com/activeeonpublic/log_analyzer/log_analyzer.zip'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'unzip log_analyzer.zip'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'rm -r -f log_analyzer.zip'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'cd '$variables_WORKSPACE'/'$variables_PROJECT' && ls'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'split -l '$variables_STREAM_SIZE' '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/log.csv'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'mv x* '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/log_space'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/log_space'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'rm -f -r '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/preview_space/output.txt'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'rm -f -r '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/preview_space/notification.txt'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/preview_space'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'touch '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/preview_space/notification.txt'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'rm -f -r '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/shared_space/empty'
docker exec $variables_CONTAINER_NAME /bin/bash -c 'ls '$variables_WORKSPACE'/'$variables_PROJECT'/'$variables_DATASPACE'/shared_space'

#split -l $variables_STREAM_SIZE log.csv
#mv x* log_space/
#cd preview_space
#pwd
#rm -f -r output.txt
#rm -f -r notification.txt
#touch notification.txt
#cd ../shared_space
#rm -f -r empty

# split -l 1000 ../data/log.csv && mv x* ../data/log_space && rm -f -r ../data/preview_space/output.txt && rm -f -r ../data/preview_space/notification.txt && touch ../data/preview_space/notification.txt && rm -f -r ../data/shared_space/empty
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="anomaly_detection">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <depends>
        <task ref="setup"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
#
# export variables_WORKSPACE=/Users/aminelouati/Documents/ActiveEon
#
#cd $variables_WORKSPACE
#cd $variables_PROJECT
#cd $variables_DATASPACE
#pwd
#
#end_streaming="false"
#
#while [ ${end_streaming} != "true" ]
#do 
#	nbr_files=$(ls ./shared_space/ | wc -l);
#	#echo $nbr_files
#    if [ ${nbr_files} -ge 1 ]; 
#    then
#		index=$((1 + RANDOM % ${nbr_files}));
#		#echo $index;
#		log_file=$(ls ./shared_space | sed -n ${index}p);
#		#echo $log_file
#		if [ ${log_file} == "empty" ]; 
#        then 
#			if [ $nbr_files -eq 1 ]; 
#            then 
#    		echo "end log processing"; 
#			end_streaming="true"; 
#			fi
#		else 
#          echo "process log file '$log_file'"; 
#		  python ../python/supervised_predicition_stream.py --model decision_tree --file ./shared_space/${log_file};
#		  #python ../python/supervised_predicition_stream.py --model logistic_regression --file ${log_file};
#		  cat ./preview_space/output.txt >> ./preview_space/notification.txt
#          rm -fr ./shared_space/${log_file} 
#		fi
#    fi
#    sleep 1
#done
#
#
#echo $end_streaming

# ./run_log_consumer_stream.sh
docker exec $variables_CONTAINER_NAME /bin/bash -c 'cd '$variables_WORKSPACE'/'$variables_PROJECT/bash' && ./run_log_consumer_stream.sh'

docker cp $variables_CONTAINER_NAME:$variables_WORKSPACE'/'$variables_PROJECT/data/preview_space/notification.txt /tmp
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
    <task name="output_preview">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="anomaly_detection"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
//def home = variables.get("WORKSPACE")
//def project = variables.get("PROJECT")
//def data= variables.get("DATASPACE")
def file_name = "notification.txt"

//file_path  = home + "/"+project+ "/"+data+ "/preview_space/" + file_name
file_path = "/tmp/" + file_name

//println "home: " + home
//println "file_name: " + file_name
println "file_path: " + file_path  


def file = new File(file_path)
println "file exists? " + file.exists()

if(file.exists())
{
  result = file.text
  resultMetadata.put("file.name", "notification.txt")
  resultMetadata.put("content.type", "text/plain")
}
]]>
          </code>
        </script>
      </scriptExecutable>
      <controlFlow block="none"></controlFlow>
    </task>
  </taskFlow>
</job>