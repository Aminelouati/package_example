<?xml version="1.0" encoding="UTF-8"?>
<job
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:proactive:jobdescriptor:3.8"
     xsi:schemaLocation="urn:proactive:jobdescriptor:3.8 http://www.activeeon.com/public_content/schemas/proactive/jobdescriptor/3.8/schedulerjob.xsd"
    name="supervised_training" projectName="Log Analysis"
    priority="normal"
    onTaskError="continueJobExecution"
     maxNumberOfExecution="2">
  <variables>
    <variable name="WORKSPACE" value="/Users/andrewssobral/ActiveEon/studio" />
    <variable name="PROJECT" value="log_analyzer" />
    <variable name="ALGORITHM" value="decision_tree" />
  </variables>
  <description>
    <![CDATA[ Trains a supervised anomaly detection on HDFS log files. ]]>
  </description>
  <genericInformation>
    <info name="Documentation" value="http://activeeon.com/resources/automated-machine-learning-activeeon.pdf"/>
  </genericInformation>
  <taskFlow>
    <task name="Setup">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
#
# export variables_WORKSPACE=/Users/andrewssobral/ActiveEon/studio
#
echo "Moving to workspace"
cd $variables_WORKSPACE
pwd

#echo "Enabling python env (using pytorch env)"
#source activate pytorch
python -V
#pip -V

if [ ! -d $variables_PROJECT ]; then
  echo "Cloning repository"
  #git clone https://andrewsactiveeon:mFPrxuvPye7mzzKJRfLY@bitbucket.org/activeeon/log_analyzer.git $variables_PROJECT
fi

if [ ! -d $variables_PROJECT ]; then
  echo "An error occurred while clonning the repository."
  exit
fi

ls

echo "Moving to repository"
cd $variables_PROJECT
pwd

echo "Moving to data folder"
cd data
pwd

echo "Downloading data"
#./download_data.sh

#echo "Close python env"
#source deactivate pytorch

echo "Download_Data task finished"
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Log_Parse">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <depends>
        <task ref="Setup"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
#
# export variables_WORKSPACE=/Users/andrewssobral/ActiveEon/studio
#
echo "Moving to workspace"
cd $variables_WORKSPACE
pwd

echo "Moving to repository"
cd $variables_PROJECT
pwd

echo "Moving to python folder"
cd python
pwd

echo "Parsing log file"
#python log_parser.py --log=../data/sorted10k.log --out=../data/log_structured10k.csv

echo "Log_Parse task finished"
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Feature_Extraction">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <depends>
        <task ref="Log_Parse"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
#
# export variables_WORKSPACE=/Users/andrewssobral/ActiveEon/studio
#
echo "Moving to workspace"
cd $variables_WORKSPACE
pwd

echo "Moving to repository"
cd $variables_PROJECT
pwd

echo "Moving to python folder"
cd python
pwd

echo "Performing log feature extraction"
#python log_features.py --log=../data/log_structured10k.csv --out=../data/rawTFVector.txt

echo "Feature_Extraction task finished"
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Supervised_Training">
      <description>
        <![CDATA[ The simplest task, ran by a bash engine. ]]>
      </description>
      <depends>
        <task ref="Feature_Extraction"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="bash">
            <![CDATA[
#
# export variables_WORKSPACE=/Users/andrewssobral/ActiveEon/studio
# export variables_ALGORITHM=decision_tree
# decision_tree,logistic_regression,Knn,svm
#
echo "Moving to workspace"
cd $variables_WORKSPACE
pwd

echo "Moving to repository"
cd $variables_PROJECT
pwd

echo "Moving to python folder"
cd python
pwd

echo "Performing supervised prediction"
python supervised_learning.py --model decision_tree --features ../data/X_train.txt --label ../data/Y_train.txt

echo "Supervised_Learning task finished"
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Preview_Raw_Data">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="Setup"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def home = variables.get("WORKSPACE")
def project = variables.get("PROJECT")
def file_name = "sorted10k.log"

file_path  = home + "/"+project+"/data/" + file_name

println "home: " + home
println "file_name: " + file_name
println "file_path: " + file_path  

def file = new File(file_path)
println "file exists? " + file.exists()

//result = file.getText('UTF-8')
result = file.text
resultMetadata.put("file.name", "log.txt") //file_name
//resultMetadata.put("content.type", "text/plain; charset=UTF-8")
resultMetadata.put("content.type", "text/plain")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Preview_Structured_Data">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="Log_Parse"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def home = variables.get("WORKSPACE")
def project = variables.get("PROJECT")
def file_name = "log_structured10k.csv.html"

file_path  = home + "/"+project+"/data/" + file_name

println "home: " + home
println "file_name: " + file_name
println "file_path: " + file_path  

def file = new File(file_path)
println "file exists? " + file.exists()

result = file.text
resultMetadata.put("file.name", "log_structured.html")
resultMetadata.put("content.type", "text/html ")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Preview_Features">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="Feature_Extraction"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def home = variables.get("WORKSPACE")
def project = variables.get("PROJECT")
def file_name = "rawTFVector10k.txt"

file_path  = home + "/"+project+"/data/" + file_name

println "home: " + home
println "file_name: " + file_name
println "file_path: " + file_path  

def file = new File(file_path)
println "file exists? " + file.exists()

result = file.text
resultMetadata.put("file.name", "log_features.txt")
resultMetadata.put("content.type", "text/plain")
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
    <task name="Preview_Output">
      <description>
        <![CDATA[ The simplest task, ran by a groovy engine. ]]>
      </description>
      <depends>
        <task ref="Supervised_Training"/>
      </depends>
      <scriptExecutable>
        <script>
          <code language="groovy">
            <![CDATA[
def home = variables.get("WORKSPACE")
def project = variables.get("PROJECT")
def file_name = "tree_graph.png"

file_path  = home + "/"+project+"/output/" + file_name

println "home: " + home
println "file_name: " + file_name
println "file_path: " + file_path  

def file = new File(file_path)
println "file exists? " + file.exists()

if(file.exists())
{
  result = file.getBytes()
  resultMetadata.put("file.name", "tree_graph.png")
  resultMetadata.put("content.type", "image/png")
}
]]>
          </code>
        </script>
      </scriptExecutable>
    </task>
  </taskFlow>
</job>